name: Backstage > RHDH Plugin Pipeline

permissions:
  contents: write

on:
  push:
    branches:
      - main
      - 'feature/**'

    paths:
      - 'plugins/**'
      - 'scripts/process-plugin.js'
      - 'package.json'
      - '.yarnrc.yml' 
      - 'processed/.metadata.json'
      - '.github/workflows/process-plugins.yml'

  workflow_dispatch:

jobs:
  install-dependencies:
    name: üöÄ Build & Deploy RHDH Plugin
    runs-on: ubuntu-latest
    env:
      npm_config_nodedir: /usr
      SERVER_URL: https://httpd-example-poteatc-dev.apps.rm1.0a51.p1.openshiftapps.com

    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GIT_TOKEN }}
        path: devhub-catalog

    - name: üì• Checkout target repository
      uses: actions/checkout@v4
      with:
        repository: C-Nell/devhub-gitops
        ref: main
        token: ${{ secrets.GIT_TOKEN}}
        path: devhub-gitops 
        
    - name: üîç Check if plugins changed
      id: check_changes
      working-directory: devhub-catalog
      run: |
        set -euo pipefail
        
        METADATA_FILE="processed/.metadata.json"
        
        # If metadata doesn't exist, we need to process
        if [ ! -f "$METADATA_FILE" ]; then
          echo "No metadata file found - will process all plugins"
          echo "has_changes=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        HAS_CHANGES=false
        
        for dir in plugins/*; do
          [ -d "$dir" ] || continue
          name="$(basename "$dir")"
          [[ "$name" == .* ]] && continue
          
          CURRENT_HASH=$(git log -1 --format="%H" -- "$dir")
          STORED_HASH=$(jq -r --arg plugin "$name" '.[$plugin].hash // "none"' "$METADATA_FILE")
          
          if [ "$CURRENT_HASH" != "$STORED_HASH" ]; then
            echo "‚úì Plugin '$name' needs processing"
            HAS_CHANGES=true
            break
          fi
        done
        
        if [ "$HAS_CHANGES" = false ]; then
          echo "üéâ No plugin changes detected - exiting workflow"
        fi
        
        echo "has_changes=$HAS_CHANGES" >> $GITHUB_OUTPUT

    - name: üîç Get Yarn version
      if: steps.check_changes.outputs.has_changes == 'true'
      id: yarn-version
      working-directory: devhub-catalog
      run: |
        file=$(ls .yarn/releases/yarn-*.cjs | head -n 1)
        version=$(basename "$file" | sed -E 's/^yarn-([0-9]+\.[0-9]+\.[0-9]+)\.cjs$/\1/')
        echo "YARN_VERSION=$version" >> $GITHUB_ENV

    - name: üõ†Ô∏è Install system dependencies
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          gcc g++ make \
          python3 \
          pkg-config \
          libssl-dev \
          libsecret-1-dev \
          unzip curl git
        # Install OpenShift oc CLI
        curl -L https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz | tar xz
        sudo mv oc /usr/local/bin/
        oc version || true

    - name: üü¢ Install Node.js 20
      if: steps.check_changes.outputs.has_changes == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: üõ†Ô∏è Install yq
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
        yq --version

    - name: üì¶ Install dependencies (fresh each run)
      if: steps.check_changes.outputs.has_changes == 'true'
      working-directory: devhub-catalog
      run: node .yarn/releases/yarn-${YARN_VERSION}.cjs install --mode=skip-build --no-immutable

    - name: üß© Process plugins
      if: steps.check_changes.outputs.has_changes == 'true'
      id: process
      working-directory: devhub-catalog
      run: |
        set -euo pipefail
        
        METADATA_FILE="processed/.metadata.json"
        
        for dir in plugins/*; do
          [ -d "$dir" ] || continue
          name="$(basename "$dir")"
          [[ "$name" == .* ]] && continue
          
          # Check if plugin exists in metadata (only if file exists)
          if [ -f "$METADATA_FILE" ] && jq -e --arg plugin "$name" '.[$plugin]' "$METADATA_FILE" > /dev/null 2>&1; then
            echo "‚äò Plugin '$name' already in metadata - skipping"
            continue
          fi
          
          echo "=== Processing $name ==="
          node scripts/process-plugin.js "$name"
        done

    - name: üíæ Update metadata in file
      if: steps.check_changes.outputs.has_changes == 'true'
      working-directory: devhub-catalog
      run: |
        set -euo pipefail
        
        METADATA_FILE="processed/.metadata.json"
        
        # Initialize metadata if doesn't exist
        if [ ! -f "$METADATA_FILE" ]; then
          echo "{}" > "$METADATA_FILE"
        fi
        
        # Update metadata for all processed plugins
        for dir in plugins/*; do
          [ -d "$dir" ] || continue
          name="$(basename "$dir")"
          [[ "$name" == .* ]] && continue
          
          CURRENT_HASH=$(git log -1 --format="%H" -- "$dir")
          
          jq --arg plugin "$name" \
             --arg hash "$CURRENT_HASH" \
             --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
             '.[$plugin] = {hash: $hash, timestamp: $timestamp}' \
             "$METADATA_FILE" > "$METADATA_FILE.tmp"
          mv "$METADATA_FILE.tmp" "$METADATA_FILE"
        done

    - name: üîê Login to OpenShift cluster
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        oc login --token=${{ secrets.OC_LOGIN_TOKEN }} --server=https://api.rm1.0a51.p1.openshiftapps.com:6443

    - name: üì§ Copy tarball to pod
      if: steps.check_changes.outputs.has_changes == 'true'
      working-directory: devhub-catalog
      env:
        NS: poteatc-dev
      run: |
        set -euo pipefail
        POD=$(oc -n "$NS" get pod -l name=httpd-example -o jsonpath='{.items[?(@.status.phase=="Running")].metadata.name}' | awk '{print $1}')
        if [ -z "$POD" ]; then
          echo "No running pod found with label name=httpd-example in namespace $NS"
          exit 1
        fi
        DEST=/opt/app-root/src
        echo "Using pod: $POD"
        echo "Dest: $DEST"

        shopt -s nullglob
        files=(processed/*.tgz)
        if [ ${#files[@]} -eq 0 ]; then
          echo "No .tgz files found in processed/"
          exit 0
        fi

        for f in "${files[@]}"; do
          echo "Copying $(basename "$f")"
          oc -n "$NS" cp "$f" "$POD":"$DEST/"
        done

    - name: Update dynamic-plugins.yaml
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        set -euo pipefail
        
        echo "üîç Scanning for .tgz files..."
        
        ADDED=0
        
        # Scan for plugins in the catalog repo
        for file in devhub-catalog/processed/*.tgz; do
          [ -f "$file" ] || continue
          
          filename=$(basename "$file")
          url="${SERVER_URL}/${filename}"
          
          echo ""
          echo "üì¶ $filename"
          
          # Check if exists in GitOps repo YAML
          if yq eval ".plugins[] | select(.package == \"$url\")" devhub-gitops/core/dynamic-plugins.yaml 2>/dev/null | grep -q .; then
            echo "   ‚ö†Ô∏è  Already in YAML"
          else
            # Add to GitOps repo YAML
            yq eval ".plugins += [{\"package\": \"$url\", \"disabled\": false}]" \
              -i devhub-gitops/core/dynamic-plugins.yaml
            echo "   ‚úÖ Added to YAML"
            ADDED=$((ADDED + 1))
          fi
        done
        
        echo ""
        echo "‚úÖ Added $ADDED new plugin(s)"
    
    - name: Show changes in GitOps repo
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        cd devhub-gitops
        echo "::group::üìù Changes to dynamic-plugins.yaml"
        git diff core/dynamic-plugins.yaml
        echo "::endgroup::"
    
    - name: Commit and push to GitOps repo
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        cd devhub-gitops
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add core/dynamic-plugins.yaml
        git diff --staged --quiet || git commit -m "chore: update dynamic-plugins.yaml with latest plugins"
        git push origin main
    
    - name: Commit metadata to current repo
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        cd devhub-catalog
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add processed/.metadata.json
        git diff --staged --quiet || git commit -m "chore: update plugin processing metadata [skip ci]"
        git push