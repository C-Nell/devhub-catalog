name: Backstage > RHDH Plugin Pipeline

permissions:
  contents: write

on:
  push:
    branches:
      - main
      - 'feature/**'

    paths:
      - 'plugins/**'
      - 'scripts/process-plugin.js'
      - 'package.json'
      - '.yarnrc.yml' 
      - 'processed/.metadata.json'

  workflow_dispatch:

jobs:
  install-dependencies:
    name: üöÄ Build & Deploy RHDH Plugin
    runs-on: ubuntu-latest
    env:
      npm_config_nodedir: /usr

    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for pushing changes back
        token: ${{ secrets.GIT_TOKEN }}

    - name: üì• Checkout target repository
      uses: actions/checkout@v4
      with:
        repository: C-Nell/devhub-gitops
        ref: main  # Specify the branch here
        token: ${{ secrets.GIT_TOKEN}}
        path: devhub-gitops 
        
    - name: üîç Check if plugins changed
      id: check_changes
      run: |
        set -euo pipefail
        
        METADATA_FILE="processed/.metadata.json"
        
        # If metadata doesn't exist, we need to process
        if [ ! -f "$METADATA_FILE" ]; then
          echo "No metadata file found - will process all plugins"
          echo "has_changes=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        HAS_CHANGES=false
        
        for dir in plugins/*; do
          [ -d "$dir" ] || continue
          name="$(basename "$dir")"
          [[ "$name" == .* ]] && continue
          
          CURRENT_HASH=$(git log -1 --format="%H" -- "$dir")
          STORED_HASH=$(jq -r --arg plugin "$name" '.[$plugin].hash // "none"' "$METADATA_FILE")
          
          if [ "$CURRENT_HASH" != "$STORED_HASH" ]; then
            echo "‚úì Plugin '$name' has changed"
            HAS_CHANGES=true
            break
          fi
        done
        
        if [ "$HAS_CHANGES" = false ]; then
          echo "üéâ No plugin changes detected - exiting workflow"
        fi
        
        echo "has_changes=$HAS_CHANGES" >> $GITHUB_OUTPUT

    - name: üîç Get Yarn version
      if: steps.check_changes.outputs.has_changes == 'true'
      id: yarn-version
      run: |
        file=$(ls .yarn/releases/yarn-*.cjs | head -n 1)
        version=$(basename "$file" | sed -E 's/^yarn-([0-9]+\.[0-9]+\.[0-9]+)\.cjs$/\1/')
        echo "YARN_VERSION=$version" >> $GITHUB_ENV

    - name: üõ†Ô∏è Install system dependencies
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          gcc g++ make \
          python3 \
          pkg-config \
          libssl-dev \
          libsecret-1-dev \
          unzip curl git
        # Install OpenShift oc CLI
        curl -L https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz | tar xz
        sudo mv oc /usr/local/bin/
        oc version || true

    - name: üü¢ Install Node.js 20
      if: steps.check_changes.outputs.has_changes == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: üì¶ Install dependencies (fresh each run)
      if: steps.check_changes.outputs.has_changes == 'true'
      run: node .yarn/releases/yarn-${YARN_VERSION}.cjs install --mode=skip-build --no-immutable

    - name: üß© Process plugins
      if: steps.check_changes.outputs.has_changes == 'true'
      id: process
      run: |
        set -euo pipefail
        
        METADATA_FILE="processed/.metadata.json"
        
        for dir in plugins/*; do
          [ -d "$dir" ] || continue
          name="$(basename "$dir")"
          [[ "$name" == .* ]] && continue
          
          # Check if plugin exists in metadata (only if file exists)
          if [ -f "$METADATA_FILE" ] && jq -e --arg plugin "$name" '.[$plugin]' "$METADATA_FILE" > /dev/null 2>&1; then
            echo "‚äò Plugin '$name' already in metadata - skipping"
            continue
          fi
          
          echo "=== Processing $name ==="
          node scripts/process-plugin.js "$name"
        done

    - name: üíæ Update and commit metadata
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        set -euo pipefail
        
        METADATA_FILE="processed/.metadata.json"
        
        # Initialize metadata if doesn't exist
        if [ ! -f "$METADATA_FILE" ]; then
          echo "{}" > "$METADATA_FILE"
        fi
        
        # Update metadata for all processed plugins
        for dir in plugins/*; do
          [ -d "$dir" ] || continue
          name="$(basename "$dir")"
          [[ "$name" == .* ]] && continue
          
          CURRENT_HASH=$(git log -1 --format="%H" -- "$dir")
          
          jq --arg plugin "$name" \
             --arg hash "$CURRENT_HASH" \
             --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
             '.[$plugin] = {hash: $hash, timestamp: $timestamp}' \
             "$METADATA_FILE" > "$METADATA_FILE.tmp"
          mv "$METADATA_FILE.tmp" "$METADATA_FILE"
        done
        
    - name: üîê Login to OpenShift cluster
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        oc login --token=${{ secrets.OC_LOGIN_TOKEN }} --server=https://api.rm1.0a51.p1.openshiftapps.com:6443

    - name: üì§ Copy tarball to pod
      if: steps.check_changes.outputs.has_changes == 'true'
      env:
        NS: poteatc-dev
      run: |
        set -euo pipefail
        POD=$(oc -n "$NS" get pod -l name=httpd-example -o jsonpath='{.items[?(@.status.phase=="Running")].metadata.name}' | awk '{print $1}')
        if [ -z "$POD" ]; then
          echo "No running pod found with label name=httpd-example in namespace $NS"
          exit 1
        fi
        DEST=/opt/app-root/src
        echo "Using pod: $POD"
        echo "Dest: $DEST"

        shopt -s nullglob
        files=(processed/*.tgz)
        if [ ${#files[@]} -eq 0 ]; then
          echo "No .tgz files found in processed/"
          exit 0
        fi

        for f in "${files[@]}"; do
          echo "Copying $(basename "$f")"
          oc -n "$NS" cp "$f" "$POD":"$DEST/"
        done
    - name: Update dynamic-plugins.yaml in repo
      run: |
        set -euo pipefail
        cd devhub-gitops

        # File path inside repo
        DYNAMIC_PLUGINS_YAML="core/dynamic-plugins.yaml"

        # Load existing YAML or create empty root if missing
        if [ ! -f "$DYNAMIC_PLUGINS_YAML" ]; then
          echo "Creating empty dynamic-plugins.yaml"
          echo "plugins: []" > "$DYNAMIC_PLUGINS_YAML"
        fi

        # Array for new entries
        new_entries=()

        # Enable nullglob so no-match globbing gives empty list
        shopt -s nullglob
        for f in ../processed/*.tgz; do
          filename=$(basename "$f")

          # Calculate integrity hash
          integrity="sha512-$(openssl dgst -sha512 -binary "$f" | openssl base64 -A)"
          url="http://httpd-example-poteatc-dev.apps.rm1.0a51.p1.openshiftapps.com/$filename"

          echo "Processing plugin $filename"
          echo "URL: $url"
          echo "Integrity: $integrity"

          # Prepare YAML plugin entry string
          entry="- package: \"$url\"
        integrity: \"$integrity\"
        disabled: false"

          new_entries+=("$entry")
        done

        # If no tarballs found, exit early
        if [ ${#new_entries[@]} -eq 0 ]; then
          echo "No plugin tarballs found, skipping update."
          exit 0
        fi

        # Remove existing entries with matching package URLs
        # First, load all package URLs from new_entries for deletion
        for entry in "${new_entries[@]}"; do
          # Extract the package URL from the entry YAML block
          pkg_url=$(echo "$entry" | grep '^ *- package:' | awk '{print $3}' | tr -d '"')
          
          # Delete entries matching this package URL from the plugins list
          yq -i "del(.plugins[] | select(.package == \"$pkg_url\"))" "$DYNAMIC_PLUGINS_YAML"
        done

        # Append new plugin entries to plugins list
        for entry in "${new_entries[@]}"; do
          # Use yq to add a new item under plugins
          yq -i ".plugins += [$(echo "$entry" | yq eval -o=json -)]" "$DYNAMIC_PLUGINS_YAML"
        done

        echo "Updated $DYNAMIC_PLUGINS_YAML successfully."

    - name: Commit and push changes to repo
      run: |
        cd devhub-gitops
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add core/dynamic-plugins.yaml
        git diff --staged --quiet || git commit -m "chore: update dynamic-plugins.yaml with latest plugins"
        git push origin main

    - name: üíæ Commit plugin metadata
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add processed/.metadata.json
        git diff --staged --quiet || git commit -m "chore: update plugin processing metadata [skip ci]"
        git push


    # - name: ‚ö†Ô∏è Display Plugin Configuration Disclaimer
    #   if: steps.check_changes.outputs.has_changes == 'true'
    #   run: |
    #     echo "------------------------------------------------------------"
    #     echo "This plugin may require additional configuration in your"
    #     echo "Backstage app-config.yaml or environment variables."
    #     echo
    #     echo "Please review the plugin documentation and consult:"
    #     echo " - Backstage Docs: https://backstage.io/docs"
    #     echo " - RHDH Docs: https://access.redhat.com/documentation/en-us/red_hat_developer_hub/"
    #     echo "------------------------------------------------------------"
