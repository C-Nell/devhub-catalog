name: Backstage > RHDH Plugin Pipeline

permissions:
  contents: write

on:
  push:
    branches:
      - main
      - 'feature/**'

    paths:
      - 'plugins/**'
      - 'scripts/process-plugin.js'
      - 'package.json'
      - '.yarnrc.yml' 
      - 'processed/.metadata.json'

  workflow_dispatch:

jobs:
  install-dependencies:
    name: 🚀 Build & Deploy RHDH Plugin
    runs-on: ubuntu-latest
    env:
      npm_config_nodedir: /usr

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for pushing changes back
        token: ${{ secrets.GIT_TOKEN }}

    - name: 📥 Checkout target repository
      uses: actions/checkout@v4
      with:
        repository: C-Nell/devhub-gitops
        ref: main  # Specify the branch here
        token: ${{ secrets.GIT_TOKEN}}
        path: devhub-gitops 
        
    - name: 🔍 Check if plugins changed
      id: check_changes
      run: |
        set -euo pipefail
        
        METADATA_FILE="processed/.metadata.json"
        
        # If metadata doesn't exist, we need to process
        if [ ! -f "$METADATA_FILE" ]; then
          echo "No metadata file found - will process all plugins"
          echo "has_changes=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        HAS_CHANGES=false
        
        for dir in plugins/*; do
          [ -d "$dir" ] || continue
          name="$(basename "$dir")"
          [[ "$name" == .* ]] && continue
          
          CURRENT_HASH=$(git log -1 --format="%H" -- "$dir")
          STORED_HASH=$(jq -r --arg plugin "$name" '.[$plugin].hash // "none"' "$METADATA_FILE")
          
          if [ "$CURRENT_HASH" != "$STORED_HASH" ]; then
            echo "✓ Plugin '$name' needs processing"
            HAS_CHANGES=true
            break
          fi
        done
        
        if [ "$HAS_CHANGES" = false ]; then
          echo "🎉 No plugin changes detected - exiting workflow"
        fi
        
        echo "has_changes=$HAS_CHANGES" >> $GITHUB_OUTPUT

    - name: 🔍 Get Yarn version
      if: steps.check_changes.outputs.has_changes == 'true'
      id: yarn-version
      run: |
        file=$(ls .yarn/releases/yarn-*.cjs | head -n 1)
        version=$(basename "$file" | sed -E 's/^yarn-([0-9]+\.[0-9]+\.[0-9]+)\.cjs$/\1/')
        echo "YARN_VERSION=$version" >> $GITHUB_ENV

    - name: 🛠️ Install system dependencies
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          gcc g++ make \
          python3 \
          pkg-config \
          libssl-dev \
          libsecret-1-dev \
          unzip curl git
        # Install OpenShift oc CLI
        curl -L https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz | tar xz
        sudo mv oc /usr/local/bin/
        oc version || true

    - name: 🟢 Install Node.js 20
      if: steps.check_changes.outputs.has_changes == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: 📦 Install dependencies (fresh each run)
      if: steps.check_changes.outputs.has_changes == 'true'
      run: node .yarn/releases/yarn-${YARN_VERSION}.cjs install --mode=skip-build --no-immutable

    - name: 🧩 Process plugins
      if: steps.check_changes.outputs.has_changes == 'true'
      id: process
      run: |
        set -euo pipefail
        
        METADATA_FILE="processed/.metadata.json"
        
        for dir in plugins/*; do
          [ -d "$dir" ] || continue
          name="$(basename "$dir")"
          [[ "$name" == .* ]] && continue
          
          # Check if plugin exists in metadata (only if file exists)
          if [ -f "$METADATA_FILE" ] && jq -e --arg plugin "$name" '.[$plugin]' "$METADATA_FILE" > /dev/null 2>&1; then
            echo "⊘ Plugin '$name' already in metadata - skipping"
            continue
          fi
          
          echo "=== Processing $name ==="
          node scripts/process-plugin.js "$name"
        done

    - name: 💾 Update and commit metadata
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        set -euo pipefail
        
        METADATA_FILE="processed/.metadata.json"
        
        # Initialize metadata if doesn't exist
        if [ ! -f "$METADATA_FILE" ]; then
          echo "{}" > "$METADATA_FILE"
        fi
        
        # Update metadata for all processed plugins
        for dir in plugins/*; do
          [ -d "$dir" ] || continue
          name="$(basename "$dir")"
          [[ "$name" == .* ]] && continue
          
          CURRENT_HASH=$(git log -1 --format="%H" -- "$dir")
          
          jq --arg plugin "$name" \
             --arg hash "$CURRENT_HASH" \
             --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
             '.[$plugin] = {hash: $hash, timestamp: $timestamp}' \
             "$METADATA_FILE" > "$METADATA_FILE.tmp"
          mv "$METADATA_FILE.tmp" "$METADATA_FILE"
        done

        

    - name: 💾 Update and commit metadata (with debug)
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        # Enable bash debugging and error handling
        set -euxo pipefail  # 'x' shows each command before executing
        
        METADATA_FILE="processed/.metadata.json"
        
        echo "::group::📋 Initial Setup"
        echo "Working directory: $(pwd)"
        echo "Metadata file path: $METADATA_FILE"
        echo "Plugins directory contents:"
        ls -la plugins/ || echo "No plugins directory"
        echo "::endgroup::"
        
        # Initialize metadata if doesn't exist
        if [ ! -f "$METADATA_FILE" ]; then
          echo "::notice::Creating new metadata file"
          mkdir -p "$(dirname "$METADATA_FILE")"
          echo "{}" > "$METADATA_FILE"
        else
          echo "::group::📄 Existing Metadata"
          cat "$METADATA_FILE"
          echo "::endgroup::"
        fi
        
        echo "::group::🔍 Processing Plugins"
        # Update metadata for all processed plugins
        PLUGIN_COUNT=0
        for dir in plugins/*; do
          [ -d "$dir" ] || continue
          name="$(basename "$dir")"
          [[ "$name" == .* ]] && continue
          
          echo "----------------------------------------"
          echo "Processing plugin: $name"
          
          # Check if directory has any commits
          if git log -1 --format="%H" -- "$dir" >/dev/null 2>&1; then
            CURRENT_HASH=$(git log -1 --format="%H" -- "$dir")
            echo "  ✓ Found git hash: ${CURRENT_HASH:0:8}"
          else
            echo "  ⚠️  No git history for $dir, skipping"
            continue
          fi
          
          TIMESTAMP="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "  ✓ Timestamp: $TIMESTAMP"
          
          # Show jq command before execution
          echo "  ✓ Updating metadata..."
          jq --arg plugin "$name" \
            --arg hash "$CURRENT_HASH" \
            --arg timestamp "$TIMESTAMP" \
            '.[$plugin] = {hash: $hash, timestamp: $timestamp}' \
            "$METADATA_FILE" > "$METADATA_FILE.tmp"
          
          # Verify the temp file was created
          if [ -f "$METADATA_FILE.tmp" ]; then
            echo "  ✓ Temp file created successfully"
            mv "$METADATA_FILE.tmp" "$METADATA_FILE"
            echo "  ✓ Metadata updated for $name"
          else
            echo "  ✗ Failed to create temp file"
            exit 1
          fi
          
          ((PLUGIN_COUNT++))
        done
        echo "::endgroup::"
        
        echo "::group::📊 Final Results"
        echo "Total plugins processed: $PLUGIN_COUNT"
        echo ""
        echo "Final metadata contents:"
        cat "$METADATA_FILE"
        echo ""
        echo "Metadata file size: $(wc -c < "$METADATA_FILE") bytes"
        echo "::endgroup::"
        
        # Set output for next steps
        echo "plugin_count=$PLUGIN_COUNT" >> $GITHUB_OUTPUT
    
    # ============================================
    # METHOD 2: Upload Artifacts for Inspection
    # ============================================
    - name: 📤 Upload metadata artifact
      if: always()  # Run even if previous step fails
      uses: actions/upload-artifact@v4
      with:
        name: metadata-debug
        path: |
          processed/.metadata.json
          processed/.metadata.json.tmp
        if-no-files-found: warn
    
    # ============================================
    # METHOD 3: Create Debug Summary
    # ============================================
    - name: 📝 Generate Debug Summary
      if: always()
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        ## 🔍 Metadata Update Debug Report
        
        ### Environment Info
        - **Runner OS**: ${{ runner.os }}
        - **Workflow**: ${{ github.workflow }}
        - **Run Number**: ${{ github.run_number }}
        
        ### File Status
        EOF
        
        if [ -f "processed/.metadata.json" ]; then
          echo "- ✅ Metadata file exists" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Metadata Contents" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          cat processed/.metadata.json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ Metadata file not found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Plugin Directories" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        ls -la plugins/ 2>&1 || echo "No plugins directory" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
    
    # ============================================
    # METHOD 4: Show Git Status
    # ============================================
    - name: 🔍 Show Git Changes
      if: always()
      run: |
        echo "::group::Git Status"
        git status
        echo "::endgroup::"
        
        echo "::group::Git Diff"
        git diff processed/.metadata.json || echo "No changes or file doesn't exist"
        echo "::endgroup::"

  


    # - name: 🔐 Login to OpenShift cluster
    #   if: steps.check_changes.outputs.has_changes == 'true'
    #   run: |
    #     oc login --token=${{ secrets.OC_LOGIN_TOKEN }} --server=https://api.rm1.0a51.p1.openshiftapps.com:6443

    # - name: 📤 Copy tarball to pod
    #   if: steps.check_changes.outputs.has_changes == 'true'
    #   env:
    #     NS: poteatc-dev
    #   run: |
    #     set -euo pipefail
    #     POD=$(oc -n "$NS" get pod -l name=httpd-example -o jsonpath='{.items[?(@.status.phase=="Running")].metadata.name}' | awk '{print $1}')
    #     if [ -z "$POD" ]; then
    #       echo "No running pod found with label name=httpd-example in namespace $NS"
    #       exit 1
    #     fi
    #     DEST=/opt/app-root/src
    #     echo "Using pod: $POD"
    #     echo "Dest: $DEST"

    #     shopt -s nullglob
    #     files=(processed/*.tgz)
    #     if [ ${#files[@]} -eq 0 ]; then
    #       echo "No .tgz files found in processed/"
    #       exit 0
    #     fi

    #     for f in "${files[@]}"; do
    #       echo "Copying $(basename "$f")"
    #       oc -n "$NS" cp "$f" "$POD":"$DEST/"
    #     done

        
    # - name: Commit and push changes to repo
    #   run: |
    #     cd devhub-gitops
    #     git config user.name "github-actions[bot]"
    #     git config user.email "github-actions[bot]@users.noreply.github.com"
    #     git add core/dynamic-plugins.yaml
    #     git diff --staged --quiet || git commit -m "chore: update dynamic-plugins.yaml with latest plugins"
    #     git push origin main

    # - name: 💾 Commit plugin metadata
    #   run: |
    #     git config user.name "github-actions[bot]"
    #     git config user.email "github-actions[bot]@users.noreply.github.com"
    #     git add processed/.metadata.json
    #     git diff --staged --quiet || git commit -m "chore: update plugin processing metadata [skip ci]"
    #     git push


    # # - name: ⚠️ Display Plugin Configuration Disclaimer
    # #   if: steps.check_changes.outputs.has_changes == 'true'
    # #   run: |
    # #     echo "------------------------------------------------------------"
    # #     echo "This plugin may require additional configuration in your"
    # #     echo "Backstage app-config.yaml or environment variables."
    # #     echo
    # #     echo "Please review the plugin documentation and consult:"
    # #     echo " - Backstage Docs: https://backstage.io/docs"
    # #     echo " - RHDH Docs: https://access.redhat.com/documentation/en-us/red_hat_developer_hub/"
    # #     echo "------------------------------------------------------------"
